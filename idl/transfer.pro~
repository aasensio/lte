@synth_lte
@synth_lte_stokesv

pro transfer

	PK = 1.3806503d-16
	UMA = 1.66053873d-24
	PE = 4.8032d-10
	PC = 2.99792458d10
	PME = 9.10938188d-28
	PH = 6.62606876d-27
	
; Model atmosphere	
	model = ddread('falc.dat',offset=4,/count)
	n = n_elements(model[0,*])
	

	Bz = replicate(100.d0, n)
	
	atmosphere = create_struct('z',model[0,*] * 1.d5, 'T',model[1,*], $
		'Pe',model[4,*] * PK * model[1,*], 'nH',model[5,*], 'vmic',model[2,*] * 1.d5,$
		'vmac', model[3,*] * 1.d5, 'Bz', Bz, 'Bz2', Bz^2)
		
		
; Spectral line
	lines = ddread('lines')
	which_line = 1
	
	line = create_struct('element', lines[0,which_line], 'ioniz', lines[1,which_line], $
		'lambda0', lines[2,which_line], 'nu0', PC / (lines[2,which_line]*1.d-8), $
		'Elow', lines[3,which_line] * PH * PC, 'gf', 10.d0^lines[4,which_line],$
		'alpha_ABO', lines[5,which_line], 'sigma_ABO', lines[6,which_line], $
		'lambda_from', lines[7,which_line], 'lambda_to', lines[8,which_line], $
		'lambda_step', lines[9,which_line], 'gbar', lines[10,which_line])

	nmontecarlo = 200
	Bz = 100.d0*randomu(seed,n,nmontecarlo) + 50.d0
	
	spectral = create_struct('lambda', 0L)

	for i = 0, nmontecarlo-1 do begin
		print, i
		atmosphere.Bz = Bz[*,i]
		Stokes = synth_lte(0, 1.d0, atmosphere, line, spectral, 'synth', Ic)
		if (i eq 0) then begin
			nl = n_elements(Stokes[0,*])
			stokesI = fltarr(nl, nmontecarlo)
			stokesV = fltarr(nl, nmontecarlo)
		endif
		stokesI[*,i] = Stokes[0,*]
		stokesV[*,i] = Stokes[1,*]
	endfor

	avgI = total(stokesI,2) / (1.d0*nmontecarlo)
	avgV = total(stokesV,2) / (1.d0*nmontecarlo)
	avgV2 = total(stokesV^2,2) / (1.d0*nmontecarlo)

	atmosphere.Bz = total(Bz,2) / (1.d0*nmontecarlo)
	atmosphere.Bz2 = total(Bz^2,2) / (1.d0*nmontecarlo)
	stokes_avg = synth_lte(0, 1.d0, atmosphere, line, spectral, 'synth', Ic, /mom)

	!p.multi = [0,2,2]
	plot, spectral.lambda, avgI / stokesI[0,0]
	oplot, spectral.lambda, stokes_avg[0,*] / stokes_avg[0,0], col=2
	plot, spectral.lambda, avgV / stokesI[0,0]
	oplot, spectral.lambda, stokes_avg[1,*] / stokes_avg[0,0], col=2
	plot, spectral.lambda, avgV2 / stokesI[0,0]
	oplot, spectral.lambda, stokes_avg[2,*] / stokes_avg[0,0], col=2
	!p.multi = 0

	stop
end
