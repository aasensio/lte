;***************************************
; Return the value of the forward problem
;***************************************
function forward_problem_synth, pars, x, extra=extra
	atmosphere = extra.atmosphere
	
	T = spline(atmosphere.nodes*1.d5,pars,atmosphere.z,sigma=0.05)
	atmosphere.T = T
	line = extra.line
	spectral = extra.spectral
	spectral.lambda = x
	res = synth_lte(0, 1.d0, atmosphere, line, spectral, 'inver')
	return, res
end

;***************************************
; Return the value of the forward problem
;***************************************
function entropy_problem, proposed, reference	
	y = total(proposed-reference-proposed*alog(proposed/reference))	
	return, y
end

pro test

	PK = 1.3806503d-16
	UMA = 1.66053873d-24
	PE = 4.8032d-10
	PC = 2.99792458d10
	PME = 9.10938188d-28
	PH = 6.62606876d-27
	
; Model atmosphere	
	model = ddread('falc.dat',offset=4,/count)
	n = n_elements(model[0,*])
	
	node_pos = [0,(n-1)/4,(n-1)/3,(n-1)/2,n-1]
	nodes = reform(model[0,node_pos])
	nnodes = n_elements(node_pos)
		
	atmosphere = create_struct('z',model[0,*] * 1.d5, 'T',model[1,*], $
		'Pe',model[4,*] * PK * model[1,*], 'nH',model[5,*], 'vmic',model[2,*] * 1.d5,$
		'vmac', model[3,*] * 1.d5, 'node_pos', node_pos, 'nodes', nodes)
		
		
; Spectral line
	lines = ddread('lines')
	which_line = 1
	
	line = create_struct('element', lines[0,which_line], 'ioniz', lines[1,which_line], $
		'lambda0', lines[2,which_line], 'nu0', PC / (lines[2,which_line]*1.d-8), $
		'Elow', lines[3,which_line] * PH * PC, 'gf', 10.d0^lines[4,which_line],$
		'alpha_ABO', lines[5,which_line], 'sigma_ABO', lines[6,which_line], $
		'lambda_from', lines[7,which_line], 'lambda_to', lines[8,which_line], $
		'lambda_step', lines[9,which_line])
		
	spectral = create_struct('lambda', 0L)
	obs = synth_lte(0, 1.d0, atmosphere, line, spectral, 'synth')
	
	sigma = 1.d-3
	obs = obs + randomn(seed,n_elements(obs))*sigma
	
	extra = create_struct('atmosphere',atmosphere,'line',line,'spectral',spectral)
	
; Run the Markov Chain
	obs_x = spectral.lambda
	obs_y = obs
	obs_sigma = replicate(sigma,n_elements(obs_x))
	
	ranges_from = [-3.d0,replicate(0.1d0,nnodes)]
	ranges_to = [5.d0,replicate(10000.d0,nnodes)]
	theta0 = [-0.3d0,1000.d0+atmosphere.T[node_pos]]
	theta_reference = [1.d0,nodes]
	
	
	prop_uniform = 100
	niter_max = 55000
	desired_acceptance = 25.d0
	
	mcmc, 'forward_problem_synth', 'entropy_problem', theta0, theta_reference, $
		ranges_from, ranges_to, obs_x, obs_y, obs_sigma,chain,$
		prop_uniform=prop_uniform, niter_max=niter_max, desired_acceptance=desired_acceptance,$
		extra=extra
	
	
	stop
end